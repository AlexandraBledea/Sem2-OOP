        -:    0:Source:C:/Users/ALEXAN~1/Desktop/FACULT~1/SEMEST~2/911/A45-91~1/DYNAMI~1/dynamic_array.h
        -:    0:Graph:C:\Users\Alexandra\Desktop\Facultate\Semestru 2\911\a45-911-Alexandra-Bledea\cmake-build-debug-coverage\CMakeFiles\a45_911_Alexandra_Bledea.dir\Repository\repository.cpp.gcno
        -:    0:Data:C:\Users\Alexandra\Desktop\Facultate\Semestru 2\911\a45-911-Alexandra-Bledea\cmake-build-debug-coverage\CMakeFiles\a45_911_Alexandra_Bledea.dir\Repository\repository.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Alexandra on 3/17/2021.
        -:    3://
        -:    4:#include <cstdlib>
        -:    5:#include "domain.h"
        -:    6:#pragma once
        -:    7:
        -:    8:template <class TElem>
        -:    9:class DynamicArray
        -:   10:{
        -:   11:private:
        -:   12:    TElem* elements;
        -:   13:    int length;
        -:   14:    int initial_capacity;
        -:   15:    int capacity;
        -:   16:
        -:   17:    /// With this function we resize the dynamic array
    #####:   18:    void Resize()
        -:   19:    {
        -:   20:        TElem* NewElements;
    #####:   21:        this->capacity = this->capacity * 2;
    #####:   22:        NewElements = new TElem[this->capacity];
    %%%%%:   22-block  0
    %%%%%:   22-block  1
    %%%%%:   22-block  2
    %%%%%:   22-block  3
    %%%%%:   22-block  4
    %%%%%:   22-block  5
    %%%%%:   22-block  6
    $$$$$:   22-block  7
    $$$$$:   22-block  8
    $$$$$:   22-block  9
    $$$$$:   22-block 10
    $$$$$:   22-block 11
    $$$$$:   22-block 12
    #####:   23:        for(int i = 0; i < this->length; i++)
    %%%%%:   23-block  0
    %%%%%:   23-block  1
        -:   24:        {
    #####:   25:            NewElements[i] = this->elements[i];
    %%%%%:   25-block  0
        -:   26:        }
    #####:   27:        delete[] this->elements;
    %%%%%:   27-block  0
    %%%%%:   27-block  1
    %%%%%:   27-block  2
    %%%%%:   27-block  3
    %%%%%:   27-block  4
    #####:   28:        this->elements = NewElements;
    #####:   29:    }
    %%%%%:   29-block  0
        -:   30:
        -:   31:    /// With this function we clear the dynamic array
        3:   32:    void Clear()
        -:   33:    {
        3:   34:        this->length = 0;
        -:   35:        TElem* NewElements;
        3:   36:        this->capacity = this->initial_capacity;
     303*:   37:        NewElements = new TElem[this->capacity];
        3:   37-block  0
        3:   37-block  1
    %%%%%:   37-block  2
        3:   37-block  3
      303:   37-block  4
      300:   37-block  5
      300:   37-block  6
    $$$$$:   37-block  7
    $$$$$:   37-block  8
    $$$$$:   37-block  9
    $$$$$:   37-block 10
    $$$$$:   37-block 11
    $$$$$:   37-block 12
       3*:   38:        for(int i = 0; i < this->length; i++)
        3:   38-block  0
        3:   38-block  1
        -:   39:        {
    #####:   40:            NewElements[i] = this->elements[i];
    %%%%%:   40-block  0
        -:   41:        }
      303:   42:        delete[] this->elements;
        3:   42-block  0
        3:   42-block  1
      303:   42-block  2
      300:   42-block  3
        3:   42-block  4
        3:   43:        this->elements = NewElements;
        3:   44:    }
        3:   44-block  0
        -:   45:
        -:   46:public:
        -:   47:/// Constructor
        -:   48:    DynamicArray(){
        -:   49:    }
        -:   50:
        -:   51:    ///  With this function we initialize the dynamic array
        -:   52:    /// \param capacity
        -:   53:    DynamicArray(int capacity)
        -:   54:    {
        -:   55:        this->capacity = capacity;
        -:   56:        this->length = 0;
        -:   57:        this->elements = new TElem[capacity];
        -:   58:        this->initial_capacity = capacity;
        -:   59:    }
        -:   60:
        -:   61:/// Destructor
       29:   62:    ~DynamicArray(){
     2929:   63:        delete [] this->elements;
       29:   63-block  0
       29:   63-block  1
     2929:   63-block  2
     2900:   63-block  3
       29:   63-block  4
       29:   64:    }
        -:   65:
        -:   66:/// With this function we add an element
        -:   67:/// \param element the element we are about to add
       45:   68:    void Add (const TElem &element)
        -:   69:    {
        -:   70://        if(this->elements == nullptr)
        -:   71://            return;
       45:   72:        if(this->length == this->capacity)
       45:   72-block  0
    #####:   73:            Resize();
    %%%%%:   73-block  0
       45:   74:        this->elements[this->length++] = element;
       45:   74-block  0
       45:   75:    }
        -:   76:
        -:   77:/// With this function we delete an element
        -:   78:/// \param position the position of the element we are about to delete
        4:   79:    void Delete(int position)
        -:   80:    {
        4:   81:        if (this->length == 1) // If array has only one element
        4:   81-block  0
        3:   82:            Clear(); // than we clear it, since it will be deleted
        3:   82-block  0
        -:   83:        else
        -:   84:        {
        -:   85:            // otherwise, shift array elements
       1*:   86:            for(int i = position; i < this->length - 1; i++)
        1:   86-block  0
        1:   86-block  1
    #####:   87:                this->elements[i] = this->elements[i+1];
    %%%%%:   87-block  0
        -:   88:
        -:   89:            // decrease array size
        1:   90:            this->length--;
        1:   90-block  0
        -:   91:        }
        4:   92:    }
        -:   93:
        -:   94:/// With this function we update an element
        -:   95:/// \param element the element we are about to update
        -:   96:/// \param position the position of the element
        6:   97:    void Update(const TElem &element, int position){
        6:   98:        this->elements[position] = element;
        6:   98-block  0
        6:   99:    }
        -:  100:
        -:  101:///With this function we get the number of elements from the dynamic array
    #####:  102:    int GetSize()
        -:  103:    {
    #####:  104:        return this->length;
    %%%%%:  104-block  0
        -:  105:    }
        -:  106:
        -:  107:/// With this function we get an exact element from the array
        -:  108:/// \param position the position of the element; we are about to get
        -:  109:/// \return it returns the element
    #####:  110:    TElem& operator [] (int position){
    #####:  111:        return this->elements[position];
    %%%%%:  111-block  0
        -:  112:    }
        -:  113:    DynamicArray& operator = (const DynamicArray &a){
        -:  114:        if(this == &a)
        -:  115:            return *this;
        -:  116:
        -:  117:        if(a.capacity == 0)
        -:  118:            Clear();
        -:  119:
        -:  120:        this->capacity = a.capacity/2;
        -:  121:        Resize();
        -:  122:
        -:  123:        memcpy(this->elements, a.elements, sizeof(TElem)*a.capacity);
        -:  124:        return *this;
        -:  125:
        -:  126:    }
        -:  127:};
        -:  128:
        -:  129:
        -:  130://void* GetAll()
        -:  131://    {
        -:  132://        return this->elements;
        -:  133://    }
