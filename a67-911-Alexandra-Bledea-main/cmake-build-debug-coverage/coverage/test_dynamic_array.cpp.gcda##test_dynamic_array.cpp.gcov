        -:    0:Source:C:/Users/Alexandra/Desktop/Facultate/Semestru 2/911/a67-911-Alexandra-Bledea/Tests/test_dynamic_array.cpp
        -:    0:Graph:C:\Users\Alexandra\Desktop\Facultate\Semestru 2\911\a67-911-Alexandra-Bledea\cmake-build-debug-coverage\CMakeFiles\a67_911_Alexandra_Bledea.dir\Tests\test_dynamic_array.cpp.gcno
        -:    0:Data:C:\Users\Alexandra\Desktop\Facultate\Semestru 2\911\a67-911-Alexandra-Bledea\cmake-build-debug-coverage\CMakeFiles\a67_911_Alexandra_Bledea.dir\Tests\test_dynamic_array.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Alexandra on 3/23/2021.
        -:    3://
        -:    4:#include "dynamic_array.h"
        -:    5:#include "test_dynamic_array.h"
        -:    6:#include <assert.h>
        -:    7:
        1:    8:void Test_DynamicArray::TestClear() {
        1:    9:    DynamicArray<int>* DA = new DynamicArray<int>(2);
        1:    9-block  0
    $$$$$:    9-block  1
        1:   10:    DA->Add(1);
        1:   10-block  0
    $$$$$:   10-block  1
        1:   11:    DA->Add(2);
        1:   11-block  0
    $$$$$:   11-block  1
        1:   12:    DA->Add(3);
        1:   12-block  0
       1*:   13:    assert(DA->GetSize() == 3);
        1:   13-block  0
    %%%%%:   13-block  1
        1:   13-block  2
        1:   14:    DA->Delete(0);
        1:   14-block  0
        1:   15:    DA->Delete(0);
        1:   16:    DA->Delete(0);
       1*:   17:    assert(DA->GetSize() == 0);
    %%%%%:   17-block  0
        1:   17-block  1
        1:   18:    delete DA;
        1:   18-block  0
        1:   18-block  1
        1:   19:}
        1:   19-block  0
        -:   20:
        1:   21:void Test_DynamicArray::TestResize() {
        1:   22:    DynamicArray<int>* DA = new DynamicArray<int>(2);
        1:   22-block  0
    $$$$$:   22-block  1
        1:   23:    DA->Add(1);
        1:   23-block  0
    $$$$$:   23-block  1
        1:   24:    DA->Add(2);
        1:   24-block  0
    $$$$$:   24-block  1
        1:   25:    DA->Add(3);
        1:   25-block  0
       1*:   26:    assert(DA->GetSize() == 3);
        1:   26-block  0
    %%%%%:   26-block  1
        1:   26-block  2
        1:   27:    delete DA;
        1:   27-block  0
        1:   27-block  1
        1:   28:}
        1:   28-block  0
        -:   29:
        1:   30:void Test_DynamicArray::TestDelete() {
        1:   31:    DynamicArray<int>* DA = new DynamicArray<int>(2);
        1:   31-block  0
    $$$$$:   31-block  1
        1:   32:    DA->Add(1);
        1:   32-block  0
    $$$$$:   32-block  1
        1:   33:    DA->Add(2);
        1:   33-block  0
       1*:   34:    assert((*DA)[0] == 1);
        1:   34-block  0
    %%%%%:   34-block  1
        1:   34-block  2
       1*:   35:    assert((*DA)[1] == 2);
        1:   35-block  0
    %%%%%:   35-block  1
        1:   35-block  2
       1*:   36:    assert(DA->GetSize() == 2);
        1:   36-block  0
    %%%%%:   36-block  1
        1:   36-block  2
        1:   37:    DA->Delete(0);
        1:   37-block  0
       1*:   38:    assert((*DA)[0] == 2);
    %%%%%:   38-block  0
        1:   38-block  1
       1*:   39:    assert(DA->GetSize() == 1);
        1:   39-block  0
    %%%%%:   39-block  1
        1:   39-block  2
        1:   40:    delete DA;
        1:   40-block  0
        1:   40-block  1
        1:   41:}
        1:   41-block  0
        -:   42:
        1:   43:void Test_DynamicArray::TestAdd() {
        1:   44:    DynamicArray<int>* DA = new DynamicArray<int>(2);
        1:   44-block  0
    $$$$$:   44-block  1
        1:   45:    DA->Add(1);
        1:   45-block  0
    $$$$$:   45-block  1
       1*:   46:    assert((*DA)[0] == 1);
        1:   46-block  0
    %%%%%:   46-block  1
        1:   46-block  2
        1:   47:    DA->Add(2);
        1:   47-block  0
       1*:   48:    assert((*DA)[1] == 2);
        1:   48-block  0
    %%%%%:   48-block  1
        1:   48-block  2
        1:   49:    delete DA;
        1:   49-block  0
        1:   49-block  1
        1:   50:}
        1:   50-block  0
        -:   51:
        1:   52:void Test_DynamicArray::TestUpdate() {
        1:   53:    DynamicArray<int>* DA = new DynamicArray<int>(2);
        1:   53-block  0
    $$$$$:   53-block  1
        1:   54:    DA->Add(1);
        1:   54-block  0
    $$$$$:   54-block  1
        1:   55:    DA->Add(2);
        1:   55-block  0
    $$$$$:   55-block  1
        1:   56:    DA->Add(3);
        1:   56-block  0
        1:   57:    DA->Update(4, 1);
        1:   57-block  0
       1*:   58:    assert((*DA)[1] == 4);
    %%%%%:   58-block  0
        1:   58-block  1
        1:   59:    delete DA;
        1:   59-block  0
        1:   59-block  1
        1:   60:}
        1:   60-block  0
        -:   61:
        1:   62:void Test_DynamicArray::TestGetSize() {
        -:   63:
        1:   64:    DynamicArray<int>* DA = new DynamicArray<int>(2);
        1:   64-block  0
    $$$$$:   64-block  1
        1:   65:    DA->Add(1);
        1:   65-block  0
    $$$$$:   65-block  1
        1:   66:    DA->Add(2);
        1:   66-block  0
       1*:   67:    assert(DA->GetSize() == 2);
        1:   67-block  0
    %%%%%:   67-block  1
        1:   67-block  2
        1:   68:    DA->Delete(1);
        1:   68-block  0
       1*:   69:    assert(DA->GetSize() == 1);
    %%%%%:   69-block  0
        1:   69-block  1
        1:   70:    DA->Delete(0);
        1:   70-block  0
       1*:   71:    assert(DA->GetSize() == 0);
    %%%%%:   71-block  0
        1:   71-block  1
        1:   72:    delete DA;
        1:   72-block  0
        1:   72-block  1
        1:   73:}
        1:   73-block  0
        -:   74:
        1:   75:void Test_DynamicArray::TestAllDynamicArray() {
        1:   76:    TestClear();
        1:   76-block  0
        1:   77:    TestResize();
        1:   78:    TestDelete();
        1:   79:    TestAdd();
        1:   80:    TestUpdate();
        1:   81:    TestGetSize();
        1:   82:}
